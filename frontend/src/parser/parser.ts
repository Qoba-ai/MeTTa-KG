// This file was generated by lezer-generator. You probably shouldn't edit it.
import {LRParser} from "@lezer/lr"
const spec_IDENTIFIER = {__proto__:null,"*":62, "/":64, "+":66, "-":68, "%":70, and:72, or:74, not:76, "<":78, ">":80, "<=":82, ">=":84, "==":86, if:88, match:90, empty:92, case:94, let:96, "let*":98, "get-type":100, "get-metatype":102, ":":104, "->":106, "=":108, unify:110, "import!":112, "bind!":114, "new-space":116, "add-atom":118, "remove-atom":120, "pragma!":122, "println!":124, "trace!":126, nop:128, "new-state":130, "get-state":132, "change-state":134, "car-atom":136, "cdr-atom":138, "cons-atom":140, assertEqual:142, assertEqualToResult:144, collapse:146, superpose:148, "load-ascii":150, call:152, regex:154, quote:156, "add-reduct":158, "!":160, Number:162, Bool:164, String:166}
export const parser = LRParser.deserialize({
  version: 14,
  states: "$OQYQPOOOOQO'#Cb'#CbOOQO'#Cd'#CdOOQO'#Cf'#CfOOQO'#Ch'#ChOOQO'#Cj'#CjOOQO'#Cl'#ClOOQO'#Co'#CoOOQO'#Cp'#CpOOQO'#Cq'#CqOOQO'#Cr'#CrOOQO'#Cn'#CnOOQO'#Cs'#CsOOQO'#Ca'#CaO%ZQPO'#CtOOQO'#Cv'#CvOOQO'#C`'#C`OOQO'#Cx'#CxQYQPOOO%bQPO'#CuO%iQPO,59`OOQO-E6v-E6vOOQO1G.z1G.z",
  stateData: "%u~OPOSQOS~OVPOXQOZRO]SO_TOaUOk_OoVOpVOqVOrVOsVOtWOuWOvWOwXOxXOyXOzXO{XO|YO}YO!OYO!PYO!QYO!RYO!SYO!TYO!UYO!VYO!WYO!XYO!YYO!ZYO![YO!]YO!^YO!_YO!`YO!aYO!bYO!cYO!dYO!eYO!fYO!gYO!hYO!iYO!jYO!kYO!lYO!mYO!nYO!oYO!pYO!qYO!rYO!s[O!t[O!u[O!w^O~O!viP~PYO!viX~PYO!vfO~OPX]Z_]~",
  goto: "!emPPPPntzPzPzPzPzPzPz!Q!Q!Q!Qzt!WtP!ZXaO^bcX`O^bcX]O^bcXZO^bcRd^QbOQc^Tebc",
  nodeNames: "âš  SPACE LINE_COMMENT Space Atom Symbol StringLiteral STRING_LITERAL BooleanLiteral BOOLEAN_LITERAL IntegerLiteral INTEGER_LITERAL FloatLiteral FLOAT_LITERAL Identifier IDENTIFIER SpaceReference SPACE_REFERENCE GroundedFunction GroundedArithmeticFunction GroundedBooleanFunction GroundedComparisonFunction OtherGroundedFunction GroundedType Expression ExpressionAtoms Variable VARIABLE",
  maxTerm: 85,
  skippedNodes: [0,1,2],
  repeatNodeCount: 1,
  tokenData: "0x~RnX^#Ppq#Pqr#trs$itu%Wvw&nxy(Uyz(Z|}#t}!O(`!Q![)T![!]#t!]!^*]!_!`#t!a!b#t!c!h#t!h!i*t!i!v#t!v!w/S!w!}#t#R#S#t#T#o#t#y#z#P$f$g#P#BY#BZ#P$IS$I_#P$I|$JO#P$JT$JU#P$KV$KW#P&FU&FV#P~#UYP~X^#Ppq#P#y#z#P$f$g#P#BY#BZ#P$IS$I_#P$I|$JO#P$JT$JU#P$KV$KW#P&FU&FV#P~#yY_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#o#t~$lTOr$irs${s;'S$i;'S;=`%Q<%lO$i~%QOV~~%TP;=`<%l$i~%ZYqr%y|}%y}!O%y!Q![%y![!]%y!_!`%y!a!b%y!c!}%y#R#S%y#T#o%y~&OYk~qr%y|}%y}!O%y!Q![%y![!]%y!_!`%y!a!b%y!c!}%y#R#S%y#T#o%y~&qYqr'a|}'a}!O'a!Q!['a![!]'a!_!`'a!a!b'a!c!}'a#R#S'a#T#o'a~'fYa~qr'a|}'a}!O'a!Q!['a![!]'a!_!`'a!a!b'a!c!}'a#R#S'a#T#o'a~(ZO!w~~(`O!v~~(eY_~qr#t|}#t}!O#t!Q![)T![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#o#t~)[ZZ~_~qr#t|}#t}!O#t!O!P)}!Q![)T![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#o#t~*QP!Q![*T~*YP]~!Q![*T~*bSQ~OY*]Z;'S*];'S;=`*n<%lO*]~*qP;=`<%l*]~*yZ_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#U+l#U#o#t~+q[_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#`#t#`#a,g#a#o#t~,l[_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#g#t#g#h-b#h#o#t~-g[_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#X#t#X#Y.]#Y#o#t~.dYX~_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#o#t~/X[_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#f#t#f#g/}#g#o#t~0S[_~qr#t|}#t}!O#t!Q![#t![!]#t!_!`#t!a!b#t!c!}#t#R#S#t#T#i#t#i#j-b#j#o#t",
  tokenizers: [0],
  topRules: {"Space":[0,3]},
  specialized: [{term: 15, get: (value: keyof typeof spec_IDENTIFIER) => spec_IDENTIFIER[value] || -1}],
  tokenPrec: 214
})
